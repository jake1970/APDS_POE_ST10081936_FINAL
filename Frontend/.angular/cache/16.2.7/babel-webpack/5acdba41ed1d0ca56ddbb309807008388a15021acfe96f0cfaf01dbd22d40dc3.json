{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth-service.service\";\nexport class AuthInterceptor {\n  constructor(authservice) {\n    this.authservice = authservice;\n  }\n  intercept(request, next) {\n    const authToken = this.authservice.getToken();\n    /*\n    const authRequest =\n      //request.clone({headers:request.headers.set(\"Authorization\", \"Bearer \"+authToken)})\n      //request.clone({headers:request.headers.set(\"x-auth-token\", authToken)})\n      request.clone({headers:request.headers.set(\"x-auth-token\", authToken)})\n      */\n    const authRequest = request.clone({\n      setHeaders: {\n        'x-auth-token': authToken\n      }\n    });\n    return next.handle(authRequest);\n  }\n  static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthServiceService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["AuthInterceptor","constructor","authservice","intercept","request","next","authToken","getToken","authRequest","clone","setHeaders","handle","_","i0","ɵɵinject","i1","AuthServiceService","_2","factory","ɵfac"],"sources":["C:\\Users\\jakey\\OneDrive\\Desktop\\APDS\\APDS7311_POE\\Frontend\\frontend\\src\\app\\auth\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthServiceService } from './auth-service.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(private authservice: AuthServiceService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler)\n   {\n    const authToken = this.authservice.getToken()\n    /*\n    const authRequest =\n      //request.clone({headers:request.headers.set(\"Authorization\", \"Bearer \"+authToken)})\n      //request.clone({headers:request.headers.set(\"x-auth-token\", authToken)})\n      request.clone({headers:request.headers.set(\"x-auth-token\", authToken)})\n      */\n\n      const authRequest = request.clone({\n        setHeaders: {\n          'x-auth-token': authToken,\n        },\n      });\n\n      \n\n    return next.handle(authRequest);\n  }\n}\n"],"mappings":";;AAWA,OAAM,MAAOA,eAAe;EAE1BC,YAAoBC,WAA+B;IAA/B,KAAAA,WAAW,GAAXA,WAAW;EAAuB;EAEtDC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IAExD,MAAMC,SAAS,GAAG,IAAI,CAACJ,WAAW,CAACK,QAAQ,EAAE;IAC7C;;;;;;IAOE,MAAMC,WAAW,GAAGJ,OAAO,CAACK,KAAK,CAAC;MAChCC,UAAU,EAAE;QACV,cAAc,EAAEJ;;KAEnB,CAAC;IAIJ,OAAOD,IAAI,CAACM,MAAM,CAACH,WAAW,CAAC;EACjC;EAAC,QAAAI,CAAA,G;qBAvBUZ,eAAe,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,kBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAfjB,eAAe;IAAAkB,OAAA,EAAflB,eAAe,CAAAmB;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}