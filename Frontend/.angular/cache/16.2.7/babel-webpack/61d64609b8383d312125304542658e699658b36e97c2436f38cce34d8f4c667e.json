{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PostServiceService {\n  constructor(http /*, private auth: AuthServiceService*/) {\n    this.http = http;\n    this.postdisplay = [];\n    this.updatedpostdisplay = new Subject();\n    this.BASE_URL = 'https://localhost:3000/api/posts';\n  }\n  /*\n  addpost_service(ptitle: string, pdescription: string, pdepartmentcode: string )\n  {\n    this.http.post('https://localhost:3000/api/posts', {title:ptitle, description:pdescription, departmentCode:pdepartmentcode})\n    .subscribe(response => {console.log(response)})\n  }\n  */\n  addpost_service(ptitle, pdescription, pdepartmentcode) {\n    this.http.post('https://localhost:3000/api/posts', {\n      title: ptitle,\n      description: pdescription,\n      departmentCode: pdepartmentcode\n    }).subscribe(thepost => {\n      this.postdisplay.push(thepost.post);\n      this.updatedpostdisplay.next([...this.postdisplay]);\n    });\n  }\n  getpost_service() {\n    this.http.get('https://localhost:3000/api/posts').subscribe(thepost => {\n      this.postdisplay = thepost.posts;\n      this.updatedpostdisplay.next([...this.postdisplay]);\n    });\n  }\n  deletepost_service(postid) {\n    this.http.delete('https://localhost:3000/api/posts/' + postid).subscribe(() => {\n      const updatedpostsdeleted = this.postdisplay.filter(post => post._id !== postid);\n      this.postdisplay = updatedpostsdeleted;\n      this.updatedpostdisplay.next([...this.postdisplay]);\n    });\n  }\n  getUpdateListener() {\n    return this.updatedpostdisplay.asObservable();\n  }\n  static #_ = this.ɵfac = function PostServiceService_Factory(t) {\n    return new (t || PostServiceService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostServiceService,\n    factory: PostServiceService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Subject","PostServiceService","constructor","http","postdisplay","updatedpostdisplay","BASE_URL","addpost_service","ptitle","pdescription","pdepartmentcode","post","title","description","departmentCode","subscribe","thepost","push","next","getpost_service","get","posts","deletepost_service","postid","delete","updatedpostsdeleted","filter","_id","getUpdateListener","asObservable","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jakey\\OneDrive\\Desktop\\APDS\\APDS7311_POE\\Frontend\\frontend\\src\\app\\posts\\post-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http'\nimport { AuthServiceService } from '../auth/auth-service.service';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostServiceService {\n\nprivate postdisplay:{_id:string, title:string, description:string, departmentCode: string, __v: string}[] = []\nprivate updatedpostdisplay = new Subject<{_id:string, title:string, description:string, departmentCode: string, __v: string}[]>()\n\n  constructor(private http: HttpClient /*, private auth: AuthServiceService*/) { }\n\nprivate readonly BASE_URL = 'https://localhost:3000/api/posts'\n\n\n\n  /*\n  addpost_service(ptitle: string, pdescription: string, pdepartmentcode: string )\n  {\n    this.http.post('https://localhost:3000/api/posts', {title:ptitle, description:pdescription, departmentCode:pdepartmentcode})\n    .subscribe(response => {console.log(response)})\n  }\n  */\n  \naddpost_service(ptitle: string, pdescription: string, pdepartmentcode: string )\n{\n  this.http.post<{message:string, post:any}>('https://localhost:3000/api/posts', {title:ptitle, description:pdescription, departmentCode:pdepartmentcode})\n  .subscribe((thepost)=>\n  {\nthis.postdisplay.push(thepost.post)\nthis.updatedpostdisplay.next([...this.postdisplay])\n  })\n}\n\n\ngetpost_service()\n{\n  this.http.get<{message:string, posts:any}>('https://localhost:3000/api/posts')\n  .subscribe((thepost)=>\n  {\nthis.postdisplay = thepost.posts\nthis.updatedpostdisplay.next([...this.postdisplay])\n  })\n}\n\ndeletepost_service(postid: string)\n{\n  this.http.delete('https://localhost:3000/api/posts/' + postid)\n  .subscribe(()=>\n  {\n    const updatedpostsdeleted = this.postdisplay.filter(post => post._id!==postid)\nthis.postdisplay = updatedpostsdeleted\nthis.updatedpostdisplay.next([...this.postdisplay])\n  })\n}\n\ngetUpdateListener()\n{\n  return this.updatedpostdisplay.asObservable()\n}\n\n\n}\n"],"mappings":"AAGA,SAASA,OAAO,QAAQ,MAAM;;;AAK9B,OAAM,MAAOC,kBAAkB;EAK7BC,YAAoBC,IAAgB,CAAC,wCAAsC;IAAvD,KAAAA,IAAI,GAAJA,IAAI;IAHlB,KAAAC,WAAW,GAAyF,EAAE;IACtG,KAAAC,kBAAkB,GAAG,IAAIL,OAAO,EAAyF;IAIhH,KAAAM,QAAQ,GAAG,kCAAkC;EAFmB;EAM/E;;;;;;;EAQFC,eAAeA,CAACC,MAAc,EAAEC,YAAoB,EAAEC,eAAuB;IAE3E,IAAI,CAACP,IAAI,CAACQ,IAAI,CAA6B,kCAAkC,EAAE;MAACC,KAAK,EAACJ,MAAM;MAAEK,WAAW,EAACJ,YAAY;MAAEK,cAAc,EAACJ;IAAe,CAAC,CAAC,CACvJK,SAAS,CAAEC,OAAO,IAAG;MAExB,IAAI,CAACZ,WAAW,CAACa,IAAI,CAACD,OAAO,CAACL,IAAI,CAAC;MACnC,IAAI,CAACN,kBAAkB,CAACa,IAAI,CAAC,CAAC,GAAG,IAAI,CAACd,WAAW,CAAC,CAAC;IACjD,CAAC,CAAC;EACJ;EAGAe,eAAeA,CAAA;IAEb,IAAI,CAAChB,IAAI,CAACiB,GAAG,CAA8B,kCAAkC,CAAC,CAC7EL,SAAS,CAAEC,OAAO,IAAG;MAExB,IAAI,CAACZ,WAAW,GAAGY,OAAO,CAACK,KAAK;MAChC,IAAI,CAAChB,kBAAkB,CAACa,IAAI,CAAC,CAAC,GAAG,IAAI,CAACd,WAAW,CAAC,CAAC;IACjD,CAAC,CAAC;EACJ;EAEAkB,kBAAkBA,CAACC,MAAc;IAE/B,IAAI,CAACpB,IAAI,CAACqB,MAAM,CAAC,mCAAmC,GAAGD,MAAM,CAAC,CAC7DR,SAAS,CAAC,MAAI;MAEb,MAAMU,mBAAmB,GAAG,IAAI,CAACrB,WAAW,CAACsB,MAAM,CAACf,IAAI,IAAIA,IAAI,CAACgB,GAAG,KAAGJ,MAAM,CAAC;MAClF,IAAI,CAACnB,WAAW,GAAGqB,mBAAmB;MACtC,IAAI,CAACpB,kBAAkB,CAACa,IAAI,CAAC,CAAC,GAAG,IAAI,CAACd,WAAW,CAAC,CAAC;IACjD,CAAC,CAAC;EACJ;EAEAwB,iBAAiBA,CAAA;IAEf,OAAO,IAAI,CAACvB,kBAAkB,CAACwB,YAAY,EAAE;EAC/C;EAAC,QAAAC,CAAA,G;qBAtDY7B,kBAAkB,EAAA8B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAlBlC,kBAAkB;IAAAmC,OAAA,EAAlBnC,kBAAkB,CAAAoC,IAAA;IAAAC,UAAA,EAFjB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}