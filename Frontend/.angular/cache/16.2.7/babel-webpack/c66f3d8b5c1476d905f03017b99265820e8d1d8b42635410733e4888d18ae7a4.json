{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PostServiceService {\n  /*\n  private postsdisplay: { _id: string, title: string, description: string, departmentCode: string, __v: string }[] = [\n    {\n      _id: '1',\n      title: 'Post 1',\n      description: 'Description 1',\n      departmentCode: 'Dept1',\n      __v: '1',\n    },\n    {\n      _id: '2',\n      title: 'Post 2',\n      description: 'Description 2',\n      departmentCode: 'Dept2',\n      __v: '2',\n    }\n  ];\n  */\n  /*\n    {\n        \"_id\": \"65256af470244bb342eb883e\",\n        \"title\": \"my first post\",\n        \"description\": \"my first description\",\n        \"departmentCode\": \"A100\",\n        \"__v\": 0\n    }\n    */\n  constructor(http) {\n    this.http = http;\n    this.updatedpostsdisplay = new Subject();\n    this.postsdisplay = [];\n  }\n  addpost_service(ptitle, pdescription, pdepartmentcode) {\n    this.http.post('https://localhost:3000/api/posts', {\n      title: ptitle,\n      description: pdescription,\n      departmentCode: pdepartmentcode\n    }).subscribe(thepost => {\n      this.postsdisplay.push(thepost.post);\n      this.updatedpostsdisplay.next([...this.postsdisplay]);\n    });\n  }\n  /*\n  getpost_service()\n  {\n    this.http.get<{message:string,posts:any}>('https://localhost:3000/api/posts')\n    .subscribe((thepost)=>\n    {\n      //alert(thepost)\n      this.postsdisplay = thepost.posts;\n      alert( this.postsdisplay)\n      this.updatedpostsdisplay.next([...this.postsdisplay]);\n  \n      \n    })\n  }\n  */\n  getpost_service() {\n    this.http.get('https://localhost:3000/api/posts').subscribe(thepost => {\n      if (Array.isArray(thepost.posts)) {\n        this.postsdisplay = thepost.posts;\n        this.updatedpostsdisplay.next([...this.postsdisplay]);\n      } else {\n        console.error('Invalid response from the API: posts is not an array');\n      }\n    });\n  }\n  deletepost_service(postid) {\n    this.http.delete('https://localhost:3000/api/posts/' + postid).subscribe(() => {\n      const updatedpostsdeleted = this.postsdisplay.filter(post => post._id !== postid);\n      this.postsdisplay = updatedpostsdeleted;\n      this.updatedpostsdisplay.next([...this.postsdisplay]);\n    });\n  }\n  getUpdateListener() {\n    return this.updatedpostsdisplay.asObservable();\n  }\n  static #_ = this.ɵfac = function PostServiceService_Factory(t) {\n    return new (t || PostServiceService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostServiceService,\n    factory: PostServiceService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Subject","PostServiceService","constructor","http","updatedpostsdisplay","postsdisplay","addpost_service","ptitle","pdescription","pdepartmentcode","post","title","description","departmentCode","subscribe","thepost","push","next","getpost_service","get","Array","isArray","posts","console","error","deletepost_service","postid","delete","updatedpostsdeleted","filter","_id","getUpdateListener","asObservable","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jakey\\OneDrive\\Desktop\\APDS\\APDS7311_POE\\Frontend\\frontend\\src\\app\\posts\\post-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http'\nimport { AuthServiceService } from '../auth/auth-service.service';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostServiceService {\n\nprivate updatedpostsdisplay = new Subject<{ _id: string, title: string, description: string, departmentCode: string, __v: string }[]>();\n\nprivate postsdisplay:{ _id: string, title: string, description: string, departmentCode: string, __v: string }[] = [];\n\n/*\nprivate postsdisplay: { _id: string, title: string, description: string, departmentCode: string, __v: string }[] = [\n  {\n    _id: '1',\n    title: 'Post 1',\n    description: 'Description 1',\n    departmentCode: 'Dept1',\n    __v: '1',\n  },\n  {\n    _id: '2',\n    title: 'Post 2',\n    description: 'Description 2',\n    departmentCode: 'Dept2',\n    __v: '2',\n  }\n];\n*/\n\n/*\n  {\n      \"_id\": \"65256af470244bb342eb883e\",\n      \"title\": \"my first post\",\n      \"description\": \"my first description\",\n      \"departmentCode\": \"A100\",\n      \"__v\": 0\n  }\n  */\n\n\nconstructor(private http: HttpClient) { }\n\n  \naddpost_service(ptitle: string, pdescription: string, pdepartmentcode: string )\n{\n  this.http.post<{message:string, post:any}>('https://localhost:3000/api/posts', {title:ptitle, description:pdescription, departmentCode:pdepartmentcode})\n  .subscribe((thepost)=>\n  {\nthis.postsdisplay.push(thepost.post)\nthis.updatedpostsdisplay.next([...this.postsdisplay])\n  })\n}\n\n/*\ngetpost_service()\n{\n  this.http.get<{message:string,posts:any}>('https://localhost:3000/api/posts')\n  .subscribe((thepost)=>\n  {\n    //alert(thepost)\n    this.postsdisplay = thepost.posts;\n    alert( this.postsdisplay)\n    this.updatedpostsdisplay.next([...this.postsdisplay]);\n\n    \n  })\n}\n*/\n\ngetpost_service() {\n  this.http.get<{ message: string, posts: { _id: string, title: string, description: string, departmentCode: string, __v: string }[] }>('https://localhost:3000/api/posts')\n    .subscribe((thepost) => {\n      if (Array.isArray(thepost.posts)) {\n        this.postsdisplay = thepost.posts;\n        this.updatedpostsdisplay.next([...this.postsdisplay]);\n      } else {\n        console.error('Invalid response from the API: posts is not an array');\n      }\n    });\n}\n\n\ndeletepost_service(postid: string)\n{\n  this.http.delete('https://localhost:3000/api/posts/' + postid)\n  .subscribe(()=>\n  {\n    const updatedpostsdeleted = this.postsdisplay.filter(post => post._id!==postid)\n    this.postsdisplay = updatedpostsdeleted\n    this.updatedpostsdisplay.next([...this.postsdisplay])\n  })\n}\n\ngetUpdateListener()\n{\n  return this.updatedpostsdisplay.asObservable()\n}\n\n\n}\n"],"mappings":"AAGA,SAASA,OAAO,QAAQ,MAAM;;;AAK9B,OAAM,MAAOC,kBAAkB;EAM/B;;;;;;;;;;;;;;;;;;EAmBA;;;;;;;;;EAWAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAlChB,KAAAC,mBAAmB,GAAG,IAAIJ,OAAO,EAA8F;IAE/H,KAAAK,YAAY,GAA8F,EAAE;EAgC5E;EAGxCC,eAAeA,CAACC,MAAc,EAAEC,YAAoB,EAAEC,eAAuB;IAE3E,IAAI,CAACN,IAAI,CAACO,IAAI,CAA6B,kCAAkC,EAAE;MAACC,KAAK,EAACJ,MAAM;MAAEK,WAAW,EAACJ,YAAY;MAAEK,cAAc,EAACJ;IAAe,CAAC,CAAC,CACvJK,SAAS,CAAEC,OAAO,IAAG;MAExB,IAAI,CAACV,YAAY,CAACW,IAAI,CAACD,OAAO,CAACL,IAAI,CAAC;MACpC,IAAI,CAACN,mBAAmB,CAACa,IAAI,CAAC,CAAC,GAAG,IAAI,CAACZ,YAAY,CAAC,CAAC;IACnD,CAAC,CAAC;EACJ;EAEA;;;;;;;;;;;;;;;EAgBAa,eAAeA,CAAA;IACb,IAAI,CAACf,IAAI,CAACgB,GAAG,CAAyH,kCAAkC,CAAC,CACtKL,SAAS,CAAEC,OAAO,IAAI;MACrB,IAAIK,KAAK,CAACC,OAAO,CAACN,OAAO,CAACO,KAAK,CAAC,EAAE;QAChC,IAAI,CAACjB,YAAY,GAAGU,OAAO,CAACO,KAAK;QACjC,IAAI,CAAClB,mBAAmB,CAACa,IAAI,CAAC,CAAC,GAAG,IAAI,CAACZ,YAAY,CAAC,CAAC;OACtD,MAAM;QACLkB,OAAO,CAACC,KAAK,CAAC,sDAAsD,CAAC;;IAEzE,CAAC,CAAC;EACN;EAGAC,kBAAkBA,CAACC,MAAc;IAE/B,IAAI,CAACvB,IAAI,CAACwB,MAAM,CAAC,mCAAmC,GAAGD,MAAM,CAAC,CAC7DZ,SAAS,CAAC,MAAI;MAEb,MAAMc,mBAAmB,GAAG,IAAI,CAACvB,YAAY,CAACwB,MAAM,CAACnB,IAAI,IAAIA,IAAI,CAACoB,GAAG,KAAGJ,MAAM,CAAC;MAC/E,IAAI,CAACrB,YAAY,GAAGuB,mBAAmB;MACvC,IAAI,CAACxB,mBAAmB,CAACa,IAAI,CAAC,CAAC,GAAG,IAAI,CAACZ,YAAY,CAAC,CAAC;IACvD,CAAC,CAAC;EACJ;EAEA0B,iBAAiBA,CAAA;IAEf,OAAO,IAAI,CAAC3B,mBAAmB,CAAC4B,YAAY,EAAE;EAChD;EAAC,QAAAC,CAAA,G;qBA5FYhC,kBAAkB,EAAAiC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAlBrC,kBAAkB;IAAAsC,OAAA,EAAlBtC,kBAAkB,CAAAuC,IAAA;IAAAC,UAAA,EAFjB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}