{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PostServiceService {\n  constructor(http) {\n    this.http = http;\n    this.postsdisplay = [];\n    this.updatedpostsdisplay = new Subject();\n  }\n  addpost_service(ptitle, pdescription, pdepartmentcode) {\n    this.http.post('https://localhost:3000/api/posts', {\n      title: ptitle,\n      description: pdescription,\n      departmentCode: pdepartmentcode\n    }).subscribe(thepost => {\n      this.postsdisplay.push(thepost.post);\n      this.updatedpostsdisplay.next([...this.postsdisplay]);\n    });\n  }\n  getpost_service() {\n    this.http.get('https://localhost:3000/api/posts').subscribe(thepost => {\n      this.postsdisplay = thepost.posts;\n      this.updatedpostsdisplay.next([...this.postsdisplay]);\n    });\n  }\n  deletepost_service(postid) {\n    this.http.delete('https://localhost:3000/api/posts/' + postid).subscribe(() => {\n      const updatedpostsdeleted = this.postsdisplay.filter(post => post._id !== postid);\n      this.postsdisplay = updatedpostsdeleted;\n      this.updatedpostsdisplay.next([...this.postsdisplay]);\n    });\n  }\n  getUpdateListener() {\n    return this.updatedpostsdisplay.asObservable();\n  }\n  static #_ = this.ɵfac = function PostServiceService_Factory(t) {\n    return new (t || PostServiceService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostServiceService,\n    factory: PostServiceService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Subject","PostServiceService","constructor","http","postsdisplay","updatedpostsdisplay","addpost_service","ptitle","pdescription","pdepartmentcode","post","title","description","departmentCode","subscribe","thepost","push","next","getpost_service","get","posts","deletepost_service","postid","delete","updatedpostsdeleted","filter","_id","getUpdateListener","asObservable","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jakey\\OneDrive\\Desktop\\APDS\\APDS7311_POE\\Frontend\\frontend\\src\\app\\posts\\post-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http'\nimport { AuthServiceService } from '../auth/auth-service.service';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostServiceService {\n\nprivate postsdisplay:{_id:string, title:string,description:string,departmentCode: string,__v: string}[] = [];\nprivate updatedpostsdisplay = new Subject<{_id:string,title:string,description:string,departmentCode: string,__v: string}[]>();\n\nconstructor(private http: HttpClient) { }\n\n  \naddpost_service(ptitle: string, pdescription: string, pdepartmentcode: string )\n{\n  this.http.post<{message:string, post:any}>('https://localhost:3000/api/posts', {title:ptitle, description:pdescription, departmentCode:pdepartmentcode})\n  .subscribe((thepost)=>\n  {\nthis.postsdisplay.push(thepost.post)\nthis.updatedpostsdisplay.next([...this.postsdisplay])\n  })\n}\n\n\ngetpost_service()\n{\n  this.http.get<{message:string,posts:any}>('https://localhost:3000/api/posts')\n  .subscribe((thepost)=>\n  {\n    this.postsdisplay = thepost.posts;\n    this.updatedpostsdisplay.next([...this.postsdisplay])\n  })\n}\n\n\ndeletepost_service(postid: string)\n{\n  this.http.delete('https://localhost:3000/api/posts/' + postid)\n  .subscribe(()=>\n  {\n    const updatedpostsdeleted = this.postsdisplay.filter(post => post._id!==postid)\n    this.postsdisplay = updatedpostsdeleted\n    this.updatedpostsdisplay.next([...this.postsdisplay])\n  })\n}\n\ngetUpdateListener()\n{\n  return this.updatedpostsdisplay.asObservable()\n}\n\n\n}\n"],"mappings":"AAGA,SAASA,OAAO,QAAQ,MAAM;;;AAK9B,OAAM,MAAOC,kBAAkB;EAK/BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,YAAY,GAAsF,EAAE;IACpG,KAAAC,mBAAmB,GAAG,IAAIL,OAAO,EAAqF;EAEtF;EAGxCM,eAAeA,CAACC,MAAc,EAAEC,YAAoB,EAAEC,eAAuB;IAE3E,IAAI,CAACN,IAAI,CAACO,IAAI,CAA6B,kCAAkC,EAAE;MAACC,KAAK,EAACJ,MAAM;MAAEK,WAAW,EAACJ,YAAY;MAAEK,cAAc,EAACJ;IAAe,CAAC,CAAC,CACvJK,SAAS,CAAEC,OAAO,IAAG;MAExB,IAAI,CAACX,YAAY,CAACY,IAAI,CAACD,OAAO,CAACL,IAAI,CAAC;MACpC,IAAI,CAACL,mBAAmB,CAACY,IAAI,CAAC,CAAC,GAAG,IAAI,CAACb,YAAY,CAAC,CAAC;IACnD,CAAC,CAAC;EACJ;EAGAc,eAAeA,CAAA;IAEb,IAAI,CAACf,IAAI,CAACgB,GAAG,CAA6B,kCAAkC,CAAC,CAC5EL,SAAS,CAAEC,OAAO,IAAG;MAEpB,IAAI,CAACX,YAAY,GAAGW,OAAO,CAACK,KAAK;MACjC,IAAI,CAACf,mBAAmB,CAACY,IAAI,CAAC,CAAC,GAAG,IAAI,CAACb,YAAY,CAAC,CAAC;IACvD,CAAC,CAAC;EACJ;EAGAiB,kBAAkBA,CAACC,MAAc;IAE/B,IAAI,CAACnB,IAAI,CAACoB,MAAM,CAAC,mCAAmC,GAAGD,MAAM,CAAC,CAC7DR,SAAS,CAAC,MAAI;MAEb,MAAMU,mBAAmB,GAAG,IAAI,CAACpB,YAAY,CAACqB,MAAM,CAACf,IAAI,IAAIA,IAAI,CAACgB,GAAG,KAAGJ,MAAM,CAAC;MAC/E,IAAI,CAAClB,YAAY,GAAGoB,mBAAmB;MACvC,IAAI,CAACnB,mBAAmB,CAACY,IAAI,CAAC,CAAC,GAAG,IAAI,CAACb,YAAY,CAAC,CAAC;IACvD,CAAC,CAAC;EACJ;EAEAuB,iBAAiBA,CAAA;IAEf,OAAO,IAAI,CAACtB,mBAAmB,CAACuB,YAAY,EAAE;EAChD;EAAC,QAAAC,CAAA,G;qBA5CY5B,kBAAkB,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAlBjC,kBAAkB;IAAAkC,OAAA,EAAlBlC,kBAAkB,CAAAmC,IAAA;IAAAC,UAAA,EAFjB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}