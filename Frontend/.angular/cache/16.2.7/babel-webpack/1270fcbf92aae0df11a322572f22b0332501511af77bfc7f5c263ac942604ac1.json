{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PostServiceService {\n  /*\n  private postsdisplay: { _id: string, title: string, description: string, departmentCode: string, __v: string }[] = [\n    {\n      _id: '1',\n      title: 'Post 1',\n      description: 'Description 1',\n      departmentCode: 'Dept1',\n      __v: '1',\n    },\n    {\n      _id: '2',\n      title: 'Post 2',\n      description: 'Description 2',\n      departmentCode: 'Dept2',\n      __v: '2',\n    }\n  ];\n  */\n  /*\n    {\n        \"_id\": \"65256af470244bb342eb883e\",\n        \"title\": \"my first post\",\n        \"description\": \"my first description\",\n        \"departmentCode\": \"A100\",\n        \"__v\": 0\n    }\n    */\n  constructor(http) {\n    this.http = http;\n    //private postsdisplay: { _id: string, title: string, description: string, departmentCode: string, __v: string }[] = [];\n    //private updatedpostsdisplay = new Subject<{ _id: string, title: string, description: string, departmentCode: string, __v: string }[]>();\n    this.postsdisplay = [];\n    this.updatedpostsdisplay = new Subject();\n  }\n  addpost_service(ptitle, pdescription, pdepartmentcode) {\n    this.http.post('https://localhost:3000/api/posts', {\n      title: ptitle,\n      description: pdescription,\n      departmentCode: pdepartmentcode\n    }).subscribe(thepost => {\n      this.postsdisplay.push(thepost.post);\n      this.updatedpostsdisplay.next([...this.postsdisplay]);\n    });\n  }\n  /*\n  getpost_service()\n  {\n    this.http.get<{message:string,posts:any}>('https://localhost:3000/api/posts')\n    .subscribe((thepost)=>\n    {\n      //alert(thepost)\n      this.postsdisplay = thepost.posts;\n      //alert( this.postsdisplay)\n      this.updatedpostsdisplay.next([...this.postsdisplay]);\n  \n      \n    })\n  }\n  */\n  /*\n  getpost_service()\n  {\n    this.http.get<{message:string,posts:any}>('https://localhost:3000/api/posts')\n    .subscribe((thepost)=>\n    {\n      //alert([thepost.posts])\n     // alert(JSON.parse(thepost.posts.))\n      this.postsdisplay = thepost.posts;\n      this.updatedpostsdisplay.next([...this.postsdisplay]);\n  \n    \n    })\n  }*/\n  getpost_service() {\n    this.http.get('https://localhost:3000/api/posts').subscribe(thepost => {\n      // Assuming thepost.posts is an object as you've mentioned\n      this.postsdisplay = thepost.posts; // Store the single post in an array\n      this.updatedpostsdisplay.next([...this.postsdisplay]);\n    });\n  }\n  deletepost_service(postid) {\n    this.http.delete('https://localhost:3000/api/posts/' + postid).subscribe(() => {\n      const updatedpostsdeleted = this.postsdisplay.filter(post => post._id !== postid);\n      this.postsdisplay = updatedpostsdeleted;\n      this.updatedpostsdisplay.next([...this.postsdisplay]);\n    });\n  }\n  getUpdateListener() {\n    return this.updatedpostsdisplay.asObservable();\n  }\n  static #_ = this.ɵfac = function PostServiceService_Factory(t) {\n    return new (t || PostServiceService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostServiceService,\n    factory: PostServiceService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Subject","PostServiceService","constructor","http","postsdisplay","updatedpostsdisplay","addpost_service","ptitle","pdescription","pdepartmentcode","post","title","description","departmentCode","subscribe","thepost","push","next","getpost_service","get","posts","deletepost_service","postid","delete","updatedpostsdeleted","filter","_id","getUpdateListener","asObservable","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jakey\\OneDrive\\Desktop\\APDS\\APDS7311_POE\\Frontend\\frontend\\src\\app\\posts\\post-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http'\nimport { AuthServiceService } from '../auth/auth-service.service';\nimport { Subject } from 'rxjs';\nimport { Int32 } from 'mongodb';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostServiceService {\n\n\n\n//private postsdisplay: { _id: string, title: string, description: string, departmentCode: string, __v: string }[] = [];\n//private updatedpostsdisplay = new Subject<{ _id: string, title: string, description: string, departmentCode: string, __v: string }[]>();\n\nprivate postsdisplay: {\n  _id: string;\n  title: string;\n  description: string;\n  departmentCode: string;\n  __v: string; // Assuming __v is a number\n}[] = [];\n\nprivate updatedpostsdisplay = new Subject<{\n  _id: string;\n  title: string;\n  description: string;\n  departmentCode: string;\n  __v: string;\n}[]>();\n\n\n/*\nprivate postsdisplay: { _id: string, title: string, description: string, departmentCode: string, __v: string }[] = [\n  {\n    _id: '1',\n    title: 'Post 1',\n    description: 'Description 1',\n    departmentCode: 'Dept1',\n    __v: '1',\n  },\n  {\n    _id: '2',\n    title: 'Post 2',\n    description: 'Description 2',\n    departmentCode: 'Dept2',\n    __v: '2',\n  }\n];\n*/\n\n\n/*\n  {\n      \"_id\": \"65256af470244bb342eb883e\",\n      \"title\": \"my first post\",\n      \"description\": \"my first description\",\n      \"departmentCode\": \"A100\",\n      \"__v\": 0\n  }\n  */\n\n\nconstructor(private http: HttpClient) { }\n\n\n  \naddpost_service(ptitle: string, pdescription: string, pdepartmentcode: string )\n{\n  this.http.post<{message:string, post:any}>('https://localhost:3000/api/posts', {title:ptitle, description:pdescription, departmentCode:pdepartmentcode})\n  .subscribe((thepost)=>\n  {\nthis.postsdisplay.push(thepost.post)\nthis.updatedpostsdisplay.next([...this.postsdisplay])\n  })\n}\n\n/*\ngetpost_service()\n{\n  this.http.get<{message:string,posts:any}>('https://localhost:3000/api/posts')\n  .subscribe((thepost)=>\n  {\n    //alert(thepost)\n    this.postsdisplay = thepost.posts;\n    //alert( this.postsdisplay)\n    this.updatedpostsdisplay.next([...this.postsdisplay]);\n\n    \n  })\n}\n*/\n\n\n/*\ngetpost_service()\n{\n  this.http.get<{message:string,posts:any}>('https://localhost:3000/api/posts')\n  .subscribe((thepost)=>\n  {\n    //alert([thepost.posts])\n   // alert(JSON.parse(thepost.posts.))\n    this.postsdisplay = thepost.posts;\n    this.updatedpostsdisplay.next([...this.postsdisplay]);\n\n  \n  })\n}*/\n\ngetpost_service() {\n  this.http.get<{ message: string, posts: any }>('https://localhost:3000/api/posts')\n    .subscribe((thepost) => {\n      // Assuming thepost.posts is an object as you've mentioned\n      this.postsdisplay = thepost.posts; // Store the single post in an array\n      this.updatedpostsdisplay.next([...this.postsdisplay]);\n    });\n}\n\n\n\n\n\n\ndeletepost_service(postid: string)\n{\n  this.http.delete('https://localhost:3000/api/posts/' + postid)\n  .subscribe(()=>\n  {\n    const updatedpostsdeleted = this.postsdisplay.filter(post => post._id!==postid)\n    this.postsdisplay = updatedpostsdeleted\n    this.updatedpostsdisplay.next([...this.postsdisplay])\n  })\n}\n\ngetUpdateListener()\n{\n  return this.updatedpostsdisplay.asObservable()\n}\n\n\n}\n"],"mappings":"AAGA,SAASA,OAAO,QAAQ,MAAM;;;AAM9B,OAAM,MAAOC,kBAAkB;EAwB/B;;;;;;;;;;;;;;;;;;EAoBA;;;;;;;;;EAWAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAnDxB;IACA;IAEQ,KAAAC,YAAY,GAMd,EAAE;IAEA,KAAAC,mBAAmB,GAAG,IAAIL,OAAO,EAMnC;EAkCkC;EAIxCM,eAAeA,CAACC,MAAc,EAAEC,YAAoB,EAAEC,eAAuB;IAE3E,IAAI,CAACN,IAAI,CAACO,IAAI,CAA6B,kCAAkC,EAAE;MAACC,KAAK,EAACJ,MAAM;MAAEK,WAAW,EAACJ,YAAY;MAAEK,cAAc,EAACJ;IAAe,CAAC,CAAC,CACvJK,SAAS,CAAEC,OAAO,IAAG;MAExB,IAAI,CAACX,YAAY,CAACY,IAAI,CAACD,OAAO,CAACL,IAAI,CAAC;MACpC,IAAI,CAACL,mBAAmB,CAACY,IAAI,CAAC,CAAC,GAAG,IAAI,CAACb,YAAY,CAAC,CAAC;IACnD,CAAC,CAAC;EACJ;EAEA;;;;;;;;;;;;;;;EAiBA;;;;;;;;;;;;;;EAeAc,eAAeA,CAAA;IACb,IAAI,CAACf,IAAI,CAACgB,GAAG,CAAkC,kCAAkC,CAAC,CAC/EL,SAAS,CAAEC,OAAO,IAAI;MACrB;MACA,IAAI,CAACX,YAAY,GAAGW,OAAO,CAACK,KAAK,CAAC,CAAC;MACnC,IAAI,CAACf,mBAAmB,CAACY,IAAI,CAAC,CAAC,GAAG,IAAI,CAACb,YAAY,CAAC,CAAC;IACvD,CAAC,CAAC;EACN;EAOAiB,kBAAkBA,CAACC,MAAc;IAE/B,IAAI,CAACnB,IAAI,CAACoB,MAAM,CAAC,mCAAmC,GAAGD,MAAM,CAAC,CAC7DR,SAAS,CAAC,MAAI;MAEb,MAAMU,mBAAmB,GAAG,IAAI,CAACpB,YAAY,CAACqB,MAAM,CAACf,IAAI,IAAIA,IAAI,CAACgB,GAAG,KAAGJ,MAAM,CAAC;MAC/E,IAAI,CAAClB,YAAY,GAAGoB,mBAAmB;MACvC,IAAI,CAACnB,mBAAmB,CAACY,IAAI,CAAC,CAAC,GAAG,IAAI,CAACb,YAAY,CAAC,CAAC;IACvD,CAAC,CAAC;EACJ;EAEAuB,iBAAiBA,CAAA;IAEf,OAAO,IAAI,CAACtB,mBAAmB,CAACuB,YAAY,EAAE;EAChD;EAAC,QAAAC,CAAA,G;qBAjIY5B,kBAAkB,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAlBjC,kBAAkB;IAAAkC,OAAA,EAAlBlC,kBAAkB,CAAAmC,IAAA;IAAAC,UAAA,EAFjB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}