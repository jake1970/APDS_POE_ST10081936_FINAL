{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../auth/auth-service.service\";\nexport class PostServiceService {\n  constructor(http, auth) {\n    this.http = http;\n    this.auth = auth;\n    this.postsdisplay = [];\n    this.updatedpostsdisplay = new Subject();\n  }\n  addpost_service(ptitle, pdescription, pdepartmentcode) {\n    this.http.post('https://localhost:3000/api/posts', {\n      title: ptitle,\n      description: pdescription,\n      departmentCode: pdepartmentcode,\n      username: this.auth.getStoredUsername()\n    }).subscribe(thepost => {\n      this.postsdisplay.push(thepost.post);\n      this.updatedpostsdisplay.next([...this.postsdisplay]);\n    });\n  }\n  getpost_service() {\n    this.http.get('https://localhost:3000/api/posts').subscribe(thepost => {\n      if (Array.isArray(thepost)) {\n        this.postsdisplay = thepost;\n        this.updatedpostsdisplay.next([...this.postsdisplay]);\n      } else {\n        console.error('Input is not an array');\n      }\n    });\n  }\n  deletepost_service(postid) {\n    this.http.delete('https://localhost:3000/api/posts/' + postid).subscribe(() => {\n      const updatedpostsdeleted = this.postsdisplay.filter(post => post._id !== postid);\n      this.postsdisplay = updatedpostsdeleted;\n      this.updatedpostsdisplay.next([...this.postsdisplay]);\n    });\n  }\n  getUpdateListener() {\n    return this.updatedpostsdisplay.asObservable();\n  }\n  static #_ = this.ɵfac = function PostServiceService_Factory(t) {\n    return new (t || PostServiceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthServiceService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostServiceService,\n    factory: PostServiceService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Subject","PostServiceService","constructor","http","auth","postsdisplay","updatedpostsdisplay","addpost_service","ptitle","pdescription","pdepartmentcode","post","title","description","departmentCode","username","getStoredUsername","subscribe","thepost","push","next","getpost_service","get","Array","isArray","console","error","deletepost_service","postid","delete","updatedpostsdeleted","filter","_id","getUpdateListener","asObservable","_","i0","ɵɵinject","i1","HttpClient","i2","AuthServiceService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jakey\\OneDrive\\Desktop\\APDS\\APDS7311_POE\\Frontend\\frontend\\src\\app\\posts\\post-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http'\nimport { AuthServiceService } from '../auth/auth-service.service';\nimport { Subject } from 'rxjs';\nimport { Int32 } from 'mongodb';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostServiceService {\n\n\n\nprivate postsdisplay: { _id: string, title: string, description: string, departmentCode: string, username: string, __v: string }[] = [];\nprivate updatedpostsdisplay = new Subject<{ _id: string, title: string, description: string, departmentCode: string,  username: string, __v: string }[]>();\n\n\n\nconstructor(private http: HttpClient, public auth: AuthServiceService) { }\n\n\n  \naddpost_service(ptitle: string, pdescription: string, pdepartmentcode: string )\n{\n  this.http.post<{message:string, post:any}>('https://localhost:3000/api/posts', {title:ptitle, description:pdescription, departmentCode:pdepartmentcode, username: this.auth.getStoredUsername()})\n  .subscribe((thepost)=>\n  {\nthis.postsdisplay.push(thepost.post)\nthis.updatedpostsdisplay.next([...this.postsdisplay])\n  })\n}\n\n\n\ngetpost_service() {\n  this.http.get<{ message: string, posts: any[] }>('https://localhost:3000/api/posts')\n    .subscribe((thepost) => {\n\n      if (Array.isArray(thepost)) {\n      this.postsdisplay = thepost; \n      this.updatedpostsdisplay.next([...this.postsdisplay]);\n      }\n      else\n      {\n        console.error('Input is not an array');\n      }\n    });\n}\n\n\n\n\ndeletepost_service(postid: string)\n{\n  this.http.delete('https://localhost:3000/api/posts/' + postid)\n  .subscribe(()=>\n  {\n    const updatedpostsdeleted = this.postsdisplay.filter(post => post._id!==postid)\n    this.postsdisplay = updatedpostsdeleted\n    this.updatedpostsdisplay.next([...this.postsdisplay])\n  })\n}\n\ngetUpdateListener()\n{\n  return this.updatedpostsdisplay.asObservable()\n}\n\n\n}\n"],"mappings":"AAGA,SAASA,OAAO,QAAQ,MAAM;;;;AAM9B,OAAM,MAAOC,kBAAkB;EAS/BC,YAAoBC,IAAgB,EAASC,IAAwB;IAAjD,KAAAD,IAAI,GAAJA,IAAI;IAAqB,KAAAC,IAAI,GAAJA,IAAI;IALzC,KAAAC,YAAY,GAAiH,EAAE;IAC/H,KAAAC,mBAAmB,GAAG,IAAIN,OAAO,EAAiH;EAIjF;EAIzEO,eAAeA,CAACC,MAAc,EAAEC,YAAoB,EAAEC,eAAuB;IAE3E,IAAI,CAACP,IAAI,CAACQ,IAAI,CAA6B,kCAAkC,EAAE;MAACC,KAAK,EAACJ,MAAM;MAAEK,WAAW,EAACJ,YAAY;MAAEK,cAAc,EAACJ,eAAe;MAAEK,QAAQ,EAAE,IAAI,CAACX,IAAI,CAACY,iBAAiB;IAAE,CAAC,CAAC,CAChMC,SAAS,CAAEC,OAAO,IAAG;MAExB,IAAI,CAACb,YAAY,CAACc,IAAI,CAACD,OAAO,CAACP,IAAI,CAAC;MACpC,IAAI,CAACL,mBAAmB,CAACc,IAAI,CAAC,CAAC,GAAG,IAAI,CAACf,YAAY,CAAC,CAAC;IACnD,CAAC,CAAC;EACJ;EAIAgB,eAAeA,CAAA;IACb,IAAI,CAAClB,IAAI,CAACmB,GAAG,CAAoC,kCAAkC,CAAC,CACjFL,SAAS,CAAEC,OAAO,IAAI;MAErB,IAAIK,KAAK,CAACC,OAAO,CAACN,OAAO,CAAC,EAAE;QAC5B,IAAI,CAACb,YAAY,GAAGa,OAAO;QAC3B,IAAI,CAACZ,mBAAmB,CAACc,IAAI,CAAC,CAAC,GAAG,IAAI,CAACf,YAAY,CAAC,CAAC;OACpD,MAED;QACEoB,OAAO,CAACC,KAAK,CAAC,uBAAuB,CAAC;;IAE1C,CAAC,CAAC;EACN;EAKAC,kBAAkBA,CAACC,MAAc;IAE/B,IAAI,CAACzB,IAAI,CAAC0B,MAAM,CAAC,mCAAmC,GAAGD,MAAM,CAAC,CAC7DX,SAAS,CAAC,MAAI;MAEb,MAAMa,mBAAmB,GAAG,IAAI,CAACzB,YAAY,CAAC0B,MAAM,CAACpB,IAAI,IAAIA,IAAI,CAACqB,GAAG,KAAGJ,MAAM,CAAC;MAC/E,IAAI,CAACvB,YAAY,GAAGyB,mBAAmB;MACvC,IAAI,CAACxB,mBAAmB,CAACc,IAAI,CAAC,CAAC,GAAG,IAAI,CAACf,YAAY,CAAC,CAAC;IACvD,CAAC,CAAC;EACJ;EAEA4B,iBAAiBA,CAAA;IAEf,OAAO,IAAI,CAAC3B,mBAAmB,CAAC4B,YAAY,EAAE;EAChD;EAAC,QAAAC,CAAA,G;qBAzDYlC,kBAAkB,EAAAmC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,kBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAlBzC,kBAAkB;IAAA0C,OAAA,EAAlB1C,kBAAkB,CAAA2C,IAAA;IAAAC,UAAA,EAFjB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}