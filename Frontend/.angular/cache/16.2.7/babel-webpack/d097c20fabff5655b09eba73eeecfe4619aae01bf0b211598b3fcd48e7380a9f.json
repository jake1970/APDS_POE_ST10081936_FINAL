{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth-service.service\";\nexport class AuthInterceptor {\n  constructor(authservice) {\n    this.authservice = authservice;\n  }\n  intercept(req, next) {\n    // Set the URL and method based on the provided request\n    const apiUrl = 'https://localhost:3000/api/posts'; // Update the URL as needed\n    const method = 'GET'; // Update the method as needed\n    // Get the authentication token\n    const authToken = this.authservice.getToken();\n    // Clone the request and add the 'x-auth-token' header\n    const authReq = req.clone({\n      url: apiUrl,\n      method: method,\n      setHeaders: {\n        'x-auth-token': authToken\n      }\n    });\n    // Pass the cloned request to the next handler\n    return next.handle(authReq);\n  }\n  static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthServiceService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["AuthInterceptor","constructor","authservice","intercept","req","next","apiUrl","method","authToken","getToken","authReq","clone","url","setHeaders","handle","_","i0","ɵɵinject","i1","AuthServiceService","_2","factory","ɵfac"],"sources":["C:\\Users\\jakey\\OneDrive\\Desktop\\APDS\\APDS7311_POE\\Frontend\\frontend\\src\\app\\auth\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthServiceService } from './auth-service.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private authservice: AuthServiceService) {}\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    // Set the URL and method based on the provided request\n    const apiUrl = 'https://localhost:3000/api/posts'; // Update the URL as needed\n    const method = 'GET'; // Update the method as needed\n\n    // Get the authentication token\n    const authToken = this.authservice.getToken()\n\n    // Clone the request and add the 'x-auth-token' header\n    const authReq = req.clone({\n      url: apiUrl,\n      method: method,\n      setHeaders: {\n        'x-auth-token': authToken,\n      },\n    });\n\n    // Pass the cloned request to the next handler\n    return next.handle(authReq);\n  }\n}\n\n/*\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(private authservice: AuthServiceService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler)\n   {\n    const authToken = this.authservice.getToken()\n   // alert(authToken)\n    \n   const authRequest = request.clone({headers:request.headers.set(\"Authorization\", \"Bearer \"+authToken)})\n \n   /*\n    const authRequest =\n      //request.clone({headers:request.headers.set(\"Authorization\", \"Bearer \"+authToken)})\n      request.clone({headers:request.headers.set(\"x-auth-token\", authToken)})\n      //request.clone({headers:request.headers.set(\"x-auth-token\", authToken)})\n      */\n      \n\n/*\n      const authRequest = request.clone({\n        setHeaders: {\n          'Authorization': authToken,\n        },\n      });\n      */\n      \n      /*\n      const authRequest = request.clone({\n        setHeaders: {\n          'x-auth-token': authToken,\n        },\n      });\n      \n\n      \n\n    return next.handle(authRequest);\n  }\n  \n}\n*/"],"mappings":";;AAWA,OAAM,MAAOA,eAAe;EAC1BC,YAAoBC,WAA+B;IAA/B,KAAAA,WAAW,GAAXA,WAAW;EAAuB;EACtDC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChD;IACA,MAAMC,MAAM,GAAG,kCAAkC,CAAC,CAAC;IACnD,MAAMC,MAAM,GAAG,KAAK,CAAC,CAAC;IAEtB;IACA,MAAMC,SAAS,GAAG,IAAI,CAACN,WAAW,CAACO,QAAQ,EAAE;IAE7C;IACA,MAAMC,OAAO,GAAGN,GAAG,CAACO,KAAK,CAAC;MACxBC,GAAG,EAAEN,MAAM;MACXC,MAAM,EAAEA,MAAM;MACdM,UAAU,EAAE;QACV,cAAc,EAAEL;;KAEnB,CAAC;IAEF;IACA,OAAOH,IAAI,CAACS,MAAM,CAACJ,OAAO,CAAC;EAC7B;EAAC,QAAAK,CAAA,G;qBArBUf,eAAe,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,kBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAfpB,eAAe;IAAAqB,OAAA,EAAfrB,eAAe,CAAAsB;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}